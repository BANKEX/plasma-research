const Uint2048Wrapper = artifacts.require('Uint2048Wrapper');

function uint2048 (string) {
  string = string.replace(/\s|\n/g, '');
  var array = [];
  for (var i = 0; i < 512; i += 64) {
    array.push('0x' + string.substr(i, 64));
  }
  return array.reverse();
}
function string (uint2048) {
  return uint2048.map(bnToHex).reverse().join('');
}
function bnToHex (n) {
  return n.toString(16).padStart(64, '0');
}

contract('Uint2048', function () {
  const a = uint2048(`
    686056ecda9db35bc122ff708c091e08085cd0547b7ae754a28da65fb44121bb
    28a8571d774e7a1bdcb21469af4d76b975751c1cdf6836f168efb06b4184cb2e
    2ba172deeae3c17219a638ab46b5f941be35446c5519033a319379be3bafaf97
    10e8715b8f94f813278398ca57ad85a88b4c4f98fef53717d77494e14a74de14
    f9b44fd714f8da3867891e44c66eebb109ef0d6aa7e00a509efef7ad24029e01
    692dab10b57df4d40bac3bbe1e16561da1ccc20e90696dab7312e0b445c5f8c5
    fc9a9411404792b36ee4bd3f7035c4ff8df11f554c25ba69a9e7df54b77e9091
    86c4449043c1b63c9b56bc612f67e21e0c082fcca178fa456f95e65ac5eafbc5
    `);
  const b = uint2048(`
    11f5ff0f502b603ea9e8fcb9989a35721521d68cd5e5f7470c96a37c3e7bb7ec
    a18b2d2971df11857c4d340e0a26f9ae017dddec4b4d38339f62898ae326bd49
    b93955287aa8fc0ce2c8a62cbae5b0ae465c5d16cc15de261a52f6356ae0b985
    5bd120e8222b2c63db2a4dd6e6cb23caf1386deeb9d865d6447d0c479e3faec9
    2a624138d01a170e77f7c0cab5a630f973217447163c553c89167f91429b9ef5
    9a6489ac76ec6aa77ba95b1504a347cf1863e435a2a7f2d56bff51fce98f7a7c
    8581da7603ca0d3f24676ee78c4a0edb88e2f4f8cf13b3dee79962b5ab72a490
    546d65b5d94b0f83ec0d406e31e8411fc65f666ab92663e309536f702581e3ef
    `);
  const num2 = uint2048(`
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000002
    `);
  const max = uint2048(`
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    `);

  const num64 = uint2048(`
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000040
    `);
  const uint256max = uint2048(`
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    `);
  beforeEach(async function () {
    this.uint2048 = await Uint2048Wrapper.new();
  });

  it('+', async function () {
    const result = await this.uint2048.add(a, b);
    const expected = `
    7a5655fc2ac9139a6b0bfc2a24a3537a1d7ea6e15160de9baf2449dbf2bcd9a7
    ca338446e92d8ba158ff4877b974706776f2fa092ab56f25085239f624ab8877
    e4dac807658cbd7efc6eded8019ba9f00491a183212ee1604be66ff3a690691c
    6cb99243b1c0247702ade6a13e78a9737c84bd87b8cd9cee1bf1a128e8b48cde
    2416910fe512f146df80df0f7c151caa7d1081b1be1c5f8d2815773e669e3cf7
    039234bd2c6a5f7b875596d322b99decba30a64433116080df1232b12f557342
    821c6e8744119ff2934c2c26fc7fd3db16d4144e1b396e489181420a62f13521
    db31aa461d0cc5c08763fccf6150233dd26796375a9f5e2878e955caeb6cdfb4
    `.replace(/\s|\n/g, '');
    assert.equal(string(result), expected);
  });
  it('+ with overflow', async function () {
    const a = uint2048(`
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    `);
    const b = uint2048(`
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000001
    `);
    const result = await this.uint2048.add(a, b);
    const expected = `
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    `.replace(/\s|\n/g, '');
    assert.equal(string(result), expected);
  });

  it('-', async function () {
    const result = await this.uint2048.sub(a, b);
    const expected = `
    566a57dd8a72531d173a02b6f36ee895f33af9c7a594f00d95f702e375c569ce
    871d29f4056f68966064e05ba5267d0b73f73e30941afebdc98d26e05e5e0de4
    72681db6703ac56536dd927e8bd0489377d8e7558903251417408388d0cef611
    b51750736d69cbaf4c594af370e261dd9a13e1aa451cd14192f78899ac352f4b
    cf520e9e44dec329ef915d7a10c8bab796cd992391a3b51415e8781be166ff0b
    cec921643e918a2c9002e0a919730e4e8968ddd8edc17ad607138eb75c367e49
    7718b99b3c7d85744a7d4e57e3ebb624050e2a5c7d12068ac24e7c9f0c0bec01
    3256deda6a76a6b8af497bf2fd7fa0fe45a8c961e8529662664276eaa06917d6
    `.replace(/\s|\n/g, '');
    assert.equal(string(result), expected);
  });

  it('- with overflow', async function () {
    const a = uint2048(`
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    `);
    const b = uint2048(`
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000001
    `);
    const result = await this.uint2048.sub(a, b);
    const expected = `
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    `.replace(/\s|\n/g, '');
    assert.equal(string(result), expected);
  });

  it('*', async function () {
    const result = await this.uint2048.mul(a, b);
    const expected = `
    528ccbca19e6563f11bc66c94c7b0d4289e0285ebf11ff4b4b2d61b86b88c576
    432905a9aded42dab75531cfdfa44e50c501bd89ec8d319dbbb872b5583e83eb
    a546b2c0869120c8a8edefd13a2116bf48268bbab7e86fe97ab57c7fec71f2d5
    78625ac6056f8aef44c7555399961a68f29f2db4fbe866459364d17bca8fdbab
    7ff328878a429173a99607a5d06142312d5b72aff2ddc66e92833b6aad5f0706
    368062f7e244ce5b1b619ccf9ec46cae7bb9d1223f1dfbe7ba4063c8496104e5
    e788ba367eae2ca42ab26a26bc9aa02a515f87d64601a3eedf6209ef0480b7ac
    eabeb4846177628c64e35c3e943924fbea94453cf7cd1dd95264cf3a7ae5bbeb
    `.replace(/\s|\n/g, '');
    assert.equal(string(result), expected);
  });

  it('/ 64', async function () {
    const result = await this.uint2048.div(a, num64);
    const expected = `

    `.replace(/\s|\n/g, '');
    assert.equal(string(result), expected);
  });

  it('==', async function () {
    assert.equal(await this.uint2048.eq(a, a), true);
    assert.equal(await this.uint2048.eq(b, b), true);
  });

  it('!=', async function () {
    assert.equal(await this.uint2048.eq(a, b), false);
  });

  it('<', async function () {
    assert.equal(await this.uint2048.lt(a, b), false);
    assert.equal(await this.uint2048.lt(a, a), false);
    assert.equal(await this.uint2048.lt(b, a), true);
    assert.equal(await this.uint2048.lt(b, b), false);
  });

  it('>', async function () {
    assert.equal(await this.uint2048.gt(a, b), true);
    assert.equal(await this.uint2048.gt(a, a), false);
    assert.equal(await this.uint2048.gt(b, a), false);
    assert.equal(await this.uint2048.gt(b, b), false);
  });

  it('<=', async function () {
    assert.equal(await this.uint2048.le(a, b), false);
    assert.equal(await this.uint2048.le(a, a), true);
    assert.equal(await this.uint2048.le(b, a), true);
    assert.equal(await this.uint2048.le(b, b), true);
  });

  it('>=', async function () {
    assert.equal(await this.uint2048.ge(a, b), true);
    assert.equal(await this.uint2048.ge(a, a), true);
    assert.equal(await this.uint2048.ge(b, a), false);
    assert.equal(await this.uint2048.ge(b, b), true);
  });

  it('% 2', async function () {
    const result = await this.uint2048.mod(a, num2);
    const expected = `
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000001
    `.replace(/\s|\n/g, '');
    assert.equal(string(result), expected);
  });
  it('addmod', async function () {
    const result = await this.uint2048.addmod(a, b, uint256max);
    const expected = `
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    1b1513289ddf37a744aea8f41acac8f53604d270bd19588e30e0d6b38aff1d2a
    `.replace(/\s|\n/g, '');
    assert.equal(string(result), expected);
  });
  it('mulmod', async function () {
    const result = await this.uint2048.mulmod(a, b, uint256max);
    const expected = `
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    fbe870ed718197ab1f5f5c3301ca1be17e223b224a106384a3d2d418fb6786bb
    `.replace(/\s|\n/g, '');
    assert.equal(string(result), expected);
  });
  it('powmod', async function () {
    const result = await this.uint2048.powmod(a, num2, uint256max);
    const expected = `
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    1f2bb79241e42b048136f1448f6647a5e125c8a9c252fd2f600fc4ee117f96c7
    `.replace(/\s|\n/g, '');
    assert.equal(string(result), expected);
  });
});
