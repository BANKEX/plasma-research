package plasmacrypto

import (
	"math/big"

	"github.com/snjax/gmp"
)

var RSA_N *gmp.Int

type Accumulator struct {
	value *gmp.Int
}

func (s *Accumulator) Value() *big.Int {
	return s.value.BigInt()
}

func (s *Accumulator) SetInt(value *big.Int) *Accumulator {
	s.value = new(gmp.Int).SetBigInt(value)
	return s
}

func (A *Accumulator) Accumulate(m uint32) *Accumulator {
	A.value.Exp(A.value, new(gmp.Int).SetUint64(uint64(m)), RSA_N)
	return A
}

func (A *Accumulator) BatchAccumulate(m []uint32) *Accumulator {
	for _, item := range m {
		A.value.Exp(A.value, new(gmp.Int).SetUint64(uint64(item)), RSA_N)
	}
	return A
}

func init() {
	RSA_N, _ = new(gmp.Int).SetString("567929035180141836514505181906423395364637523630004296534953190382729779104946466808145060315889168832351514849254121460560401183992322798196778908172944282049652978082231651450413053439125399748245393342266673218282217648568535442341585489635580424585586470287479496263427647668461192988672198375100513080861861740024446157196344609240727691320480431925016302901626972655553323147580467130962657613063614438853373115971874156550263033759261564463537507073206949306302733535630290376417631219448330889587792553141466860019084109221241619362203348378019086836340012564980042874933081187422421309864488491570615053937", 10)
}
