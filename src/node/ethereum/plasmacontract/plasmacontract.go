// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package store

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StoreABI is the input ABI used to generate the binding from.
const StoreABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inputBytes\",\"type\":\"bytes\"},{\"name\":\"txProofBytes\",\"type\":\"bytes\"},{\"name\":\"blockIndex\",\"type\":\"uint64\"},{\"name\":\"spendIndex\",\"type\":\"uint8\"}],\"name\":\"withdrawalChallangeSpend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ASSET_DECIMALS_TRUNCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"name\":\"newBlocks\",\"type\":\"bytes\"},{\"name\":\"rsv\",\"type\":\"bytes\"}],\"name\":\"submitBlocksSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amountArg\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"assetOffset\",\"type\":\"uint256\"}],\"name\":\"setAssetOffset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAIN_COIN_ASSET_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inputBytes\",\"type\":\"bytes\"}],\"name\":\"withdrawalBegin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"name\":\"newBlocks\",\"type\":\"bytes\"}],\"name\":\"submitBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721_ASSET_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"assetOffsets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositERC721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inputBytes\",\"type\":\"bytes\"},{\"name\":\"intervalId\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawalEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"blocks\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLASMA_ASSETS_TOTAL_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"intervalId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"begin\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint64\"}],\"name\":\"AssetDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CoinDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"begin\",\"type\":\"uint64\"}],\"name\":\"ERC721Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blockIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"txIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"outputIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"begin\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint64\"}],\"name\":\"WithdrawalBegin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"length\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BlocksSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"

// StoreBin is the compiled bytecode used for deploying new contracts.
const StoreBin = `0x6080604081905260008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36000805260046020526200008a7f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec640100000000620024b0620000d382021704565b60016000526004602052620000cd7fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05640100000000620024b0620000d382021704565b6200023c565b8054156200016857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4f726465726564496e74657276616c4c6973742077617320616c72656164792060448201527f696e697469616c697a6564000000000000000000000000000000000000000000606482015290519081900360840190fd5b604080516080810182526000808252602080830182815293830182815260608401838152865460018101885596845291909220925192909401805493519151945167ffffffffffffffff1990941667ffffffffffffffff93841617604060020a608060020a031916680100000000000000009284169290920291909117608060020a60c060020a0319167001000000000000000000000000000000009483169490940293909317600160c060020a031678010000000000000000000000000000000000000000000000009190921602179055565b613dab806200024c6000396000f3006080604052600436106101035763ffffffff60e060020a600035041663150b7a0281146101085780631718904a146101ac5780631b044c3c146102685780631f10e5da1461028f578063715018a61461032b5780638ce0b5a2146103425780638da5cb5b146103575780638f32d59b1461038857806397feb9261461039d5780639b65e579146103c15780639c6a3907146103e5578063b964a183146103fa578063bada116414610446578063bfa6c37c146104a4578063cf616025146104b9578063d0e30db0146104da578063d29a4bf6146104e2578063e975535714610506578063f25b3f991461057c578063f2fde38b14610594578063f93a936f146105b5575b600080fd5b34801561011457600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261017794600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506105e39650505050505050565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b3480156101b857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261025494369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750505083356001604060020a031694505050506020013560ff16610794565b604080519115158252519081900360200190f35b34801561027457600080fd5b5061027d6109a6565b60408051918252519081900360200190f35b34801561029b57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261027d95833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506109b09650505050505050565b34801561033757600080fd5b50610340610b1a565b005b34801561034e57600080fd5b5061027d610b84565b34801561036357600080fd5b5061036c610b8b565b60408051600160a060020a039092168252519081900360200190f35b34801561039457600080fd5b50610254610b9a565b3480156103a957600080fd5b50610340600160a060020a0360043516602435610bab565b3480156103cd57600080fd5b50610340600160a060020a0360043516602435610f60565b3480156103f157600080fd5b5061036c6110a0565b6040805160206004803580820135601f81018490048402850184019095528484526102549436949293602493928401919081908401838280828437509497506110a59650505050505050565b34801561045257600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261027d9583359536956044949193909101919081908401838280828437509497506112d29650505050505050565b3480156104b057600080fd5b5061036c6112f8565b3480156104c557600080fd5b5061027d600160a060020a03600435166112fd565b610340611318565b3480156104ee57600080fd5b50610340600160a060020a03600435166024356114ab565b34801561051257600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610340943694929360249392840191908190840183828082843750949750505083356001604060020a031694505050506020810135600160a060020a031690604001356118a3565b34801561058857600080fd5b5061036c600435611e8e565b3480156105a057600080fd5b50610340600160a060020a0360043516611eba565b3480156105c157600080fd5b506105ca611ed9565b6040805163ffffffff9092168252519081900360200190f35b60008033846040516020018083600160a060020a0316600160a060020a0316606060020a028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106106555780518252601f199092019160209182019101610636565b5181516000196020949094036101000a9390930192831692191691909117905260405192018290039091209350505050600160a060020a038616301461070b576040805160e560020a62461bcd02815260206004820152602f60248201527f4f6e6c79207468697320636f6e74726163742073686f756c64206465706f736960448201527f742045524337323120746f6b656e730000000000000000000000000000000000606482015290519081900360840190fd5b6002548114610764576040805160e560020a62461bcd02815260206004820152601d60248201527f45524337323120746f6b656e20776173206e6f74206578706563746564000000604482015290519081900360640190fd5b50506000600255507f150b7a02000000000000000000000000000000000000000000000000000000009392505050565b600061079e613cb6565b6107a6613cf2565b60006107b188611ee0565b92506107bc87611f07565b8351602080860151604080880151606089015160808a015160a08b015160c08c01518551606060020a600160a060020a039a8b168102828b015260e060020a63ffffffff998a168102603484015298909616909702603888015260f860020a60ff90941693909302603c8701529616909102603d84015260c060020a6001604060020a0395861681026051850152941690930260598201528251604181830301815260619091019283905280519395509282918401908083835b602083106108955780518252601f199092019160209182019101610876565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008181526006909252929020549194505060ff16151591506109529050576040805160e560020a62461bcd02815260206004820152602160248201527f596f752073686f756c64207374617274207769746864726177616c206669727360448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610978610967876001604060020a0316611e8e565b839062ffffff63ffffffff611f2316565b151561098357600080fd5b6000908152600660205260409020805460ff191690555060019695505050505050565b655af3107a400081565b600080600085856040516020018083815260200182805190602001908083835b602083106109ef5780518252601f1990920191602091820191016109d0565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b60208310610a535780518252601f199092019160209182019101610a34565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150610a8b82612081565b9050610a97818561212b565b600160a060020a0316610aa8610b8b565b600160a060020a031614610b06576040805160e560020a62461bcd02815260206004820152601160248201527f496e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b610b108686612200565b9695505050505050565b610b22610b9a565b1515610b2d57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001545b90565b600054600160a060020a031690565b600054600160a060020a0316331490565b6000806000806000806000610be3600460008b600160a060020a0316600160a060020a03168152602001908152602001600020612365565b1515610c5e576040805160e560020a62461bcd028152602060048201526024808201527f4f70657261746f722073686f756c6420616464207468697320746f6b656e206660448201527f6972737400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0389166000908152600460205260409020655af3107a400089049750610c8b908861236c565b95509550955088600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610cec57600080fd5b505af1158015610d00573d6000803e3d6000fd5b505050506040513d6020811015610d1657600080fd5b50519250610d3e600160a060020a038a1633306001604060020a038b1663ffffffff6123e816565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051610ddd918591600160a060020a038d16916370a082319160248083019260209291908290030181600087803b158015610da557600080fd5b505af1158015610db9573d6000803e3d6000fd5b505050506040513d6020811015610dcf57600080fd5b50519063ffffffff61249916565b6040805182815290519193503391600160a060020a038c16917fe33e9822e3317b004d587136bab2627ea1ecfbba4eb79abddd0a56cfdd09c0e1919081900360200190a3604080516001604060020a038089168252808816602083015286168183015290513391600160a060020a038c16917f9032c225a61b3707cb5287484fb18ea898ee87a267f5ad3566cbef48ddc24fba9181900360600190a360408051606060020a600160a060020a038c1681026020808401919091523391909102603483015260c060020a6001604060020a03808b1682026048850152808a16820260508501528816026058830152825180830384018152606090920192839052815191929182918401908083835b60208310610f095780518252601f199092019160209182019101610eea565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120336000908152600583529384208054600181018255908552919093200191909155505050505050505050505050565b610f68610b9a565b1515610f7357600080fd5b600181118015610f84575061010081105b1515611000576040805160e560020a62461bcd02815260206004820152602760248201527f61737365744f66667365742073686f756c6420626520696e2072616e6765205b60448201527f322c203235355d00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0382166000908152600360205260409020541561106e576040805160e560020a62461bcd02815260206004820152601b60248201527f61737365744f66667365742077617320616c7265616479207365740000000000604482015290519081900360640190fd5b600160a060020a03821660009081526003602090815260408083208490556004909152902061109c906124b0565b5050565b600081565b60006110af613cb6565b60006110ba84611ee0565b91507f7bdb2cf01b63deccbb5bd6324837d4263466ea905850e0adcc6c7ddb448181a3826000015183602001518460400151856060015186608001518760a001518860c001516040518088600160a060020a0316600160a060020a031681526020018763ffffffff1663ffffffff1681526020018663ffffffff1663ffffffff1681526020018560ff1660ff16815260200184600160a060020a0316600160a060020a03168152602001836001604060020a03166001604060020a03168152602001826001604060020a03166001604060020a0316815260200197505050505050505060405180910390a181516020808401516040808601516060870151608088015160a089015160c08a01518551606060020a600160a060020a039a8b168102828b015260e060020a63ffffffff998a168102603484015298909616909702603888015260f860020a60ff90941693909302603c8701529616909102603d84015260c060020a6001604060020a0395861681026051850152941690930260598201528251604181830301815260619091019283905280519092918291908401908083835b6020831061127e5780518252601f19909201916020918201910161125f565b51815160001960209485036101000a019081169019919091161790526040805194909201849003909320600081815260069094529220805460ff1916600190811790915596509093505050505b5050919050565b60006112dc610b9a565b15156112e757600080fd5b6112f18383612200565b5092915050565b600181565b600160a060020a031660009081526003602052604090205490565b60008080526004602052655af3107a40003404908080806113597f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec8661236c565b604080516001604060020a038a1681529051939750919550935033917f7d6babeeae6799e032644c4c2d100c2ab47a967aec6115cf3ec5c09b818a62b69181900360200190a2604080516001604060020a0380871682528086166020830152841681830152905133916000917f9032c225a61b3707cb5287484fb18ea898ee87a267f5ad3566cbef48ddc24fba9181900360600190a360408051606060020a330260208083019190915260c060020a6001604060020a0389160260348301528251601c818403018152603c90920192839052815191929182918401908083835b602083106114585780518252601f199092019160209182019101611439565b51815160209384036101000a600019018019909216911617905260408051929094018290039091203360009081526005835293842080546001810182559085529190932001919091555050505050505050565b600080600080600086866040516020018083600160a060020a0316600160a060020a0316606060020a028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106115225780518252601f199092019160209182019101611503565b5181516020939093036101000a6000190180199091169216919091179052604080519190930181900381206002557f42842e0e000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018b90529151600160a060020a038c1694506342842e0e93506064808401936000935082900301818387803b1580156115ba57600080fd5b505af11580156115ce573d6000803e3d6000fd5b505060025415915061162c9050576040805160e560020a62461bcd02815260206004820152601960248201527f45524337323120746f6b656e206e6f7420726563656976656400000000000000604482015290519081900360640190fd5b600160008190526004602052611669907fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe059063ffffffff61236c16565b945094509450836001604060020a031633600160a060020a031688600160a060020a03167f9e49df316dc5092c01f8b43df9e0a400cf0ce3c7f7d943da44da5a6a3446aa50896040518082815260200191505060405180910390a4604080516001604060020a0380881682528087166020830152851681830152905133916001917f9032c225a61b3707cb5287484fb18ea898ee87a267f5ad3566cbef48ddc24fba9181900360600190a360408051606060020a60208083018290523391909102603483015260c060020a6001604060020a03808a1682026048850152808916820260508501528716026058830152825180830384018152606090920192839052815191929182918401908083835b602083106117975780518252601f199092019160209182019101611778565b51815160209384036101000a6000190180199092169116179052604080519290940182900382203360009081526005835285812080546001810182559082529083902001819055600160a060020a038e16606060020a0283830152603483018d90526001604060020a038b1660c060020a0260548401528451808403603c018152605c9093019485905282519098509195509293508392850191508083835b602083106118555780518252601f199092019160209182019101611836565b51815160001960209485036101000a01908116901991909116179052604080519490920184900390932060009081526007909352909120805460ff1916600117905550505050505050505050565b6118ab613cb6565b6000806118b787611ee0565b80516020808301516040808501516060860151608087015160a088015160c08901518551606060020a600160a060020a039a8b168102828b015260e060020a63ffffffff998a168102603484015298909616909702603888015260f860020a60ff90941693909302603c8701529616909102603d84015260c060020a6001604060020a0395861681026051850152941690930260598201528251604181830301815260619091019283905280519396509282918401908083835b602083106119905780518252601f199092019160209182019101611971565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008181526006909252929020549195505060ff1615159150611a4d9050576040805160e560020a62461bcd02815260206004820152602160248201527f596f752073686f756c64207374617274207769746864726177616c206669727360448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000828152600660209081526040808320805460ff1916905560a086015160c08701516080880151600160a060020a0316855260049093529220611a9b92909189919063ffffffff6125fe16565b506080830151600160a060020a03161515611b32578260000151600160a060020a03166108fc611b04655af3107a4000611af88760a001516001604060020a03168860c001516001604060020a031661249990919063ffffffff16565b9063ffffffff612a9516565b6040518115909202916000818181858888f19350505050158015611b2c573d6000803e3d6000fd5b50611e85565b6080830151600160a060020a031660011415611dc9578260a001516001016001604060020a03168360c001516001604060020a0316141515611be4576040805160e560020a62461bcd02815260206004820152603760248201527f497420697320616c6c6f77656420746f207769746864726177206f6e6c79203160448201527f2045524337323120706572207472616e73616374696f6e000000000000000000606482015290519081900360840190fd5b84848460a001516040516020018084600160a060020a0316600160a060020a0316606060020a028152601401838152602001826001604060020a03166001604060020a031660c060020a02815260080193505050506040516020818303038152906040526040518082805190602001908083835b60208310611c775780518252601f199092019160209182019101611c58565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008181526007909252929020549194505060ff1615159150611d349050576040805160e560020a62461bcd02815260206004820152602160248201527f496e76616c696420746f6b656e206f7220746f6b65496420617267756d656e7460448201527f7300000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600081815260076020526040808220805460ff1916905580517f095ea7b3000000000000000000000000000000000000000000000000000000008152336004820152602481018790529051600160a060020a0388169263095ea7b3926044808201939182900301818387803b158015611dac57600080fd5b505af1158015611dc0573d6000803e3d6000fd5b50505050611e85565b84600160a060020a031663a9059cbb33611e068660a001516001604060020a03168760c001516001604060020a031661249990919063ffffffff16565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015611e5857600080fd5b505af1158015611e6c573d6000803e3d6000fd5b505050506040513d6020811015611e8257600080fd5b50505b50505050505050565b6000600182815481101515611e9f57fe5b600091825260209091200154600160a060020a031692915050565b611ec2610b9a565b1515611ecd57600080fd5b611ed681612aca565b50565b62ffffff81565b611ee8613cb6565b611f01611efc611ef784612b47565b612b98565b612c6b565b92915050565b611f0f613cf2565b611f01611f1e611ef784612b47565b612d74565b600080600080600080600080600060188c6060015151811515611f4257fe5b049750611f6e8c60200151600001518d602001516020015163ffffffff16612e1c90919063ffffffff16565b60408d015160208e0151518e5192995090975095509350600092505b878360ff16101561203557611fa68c606001518460ff16612e35565b909250905060018085161415611ff557611fc282888389612e58565b9550611fd863ffffffff808716908490612e1c16565b9450611fee63ffffffff808916908490612f1516565b965061201a565b61200187838884612e58565b955061201763ffffffff808916908490612f1516565b96505b600263ffffffff909416939093049260019290920191611f8a565b63ffffffff851615801561205457508963ffffffff168763ffffffff16145b801561207157508a600160a060020a031686600160a060020a0316145b9c9b505050505050505050505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c80830185905283518084039091018152605c909201928390528151600093918291908401908083835b602083106120f95780518252601f1990920191602091820191016120da565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b6000806000808451604114151561214557600093506121f7565b50505060208201516040830151606084015160001a601b60ff8216101561216a57601b015b8060ff16601b1415801561218257508060ff16601c14155b1561219057600093506121f7565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af11580156121ea573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b6000806000806000806014875181151561221657fe5b60015491900495508814612274576040805160e560020a62461bcd02815260206004820152601160248201527f496e76616c69642066726f6d496e646578000000000000000000000000000000604482015290519081900360640190fd5b600154612287908963ffffffff61249916565b9350612299888663ffffffff612f3016565b6122a4600182613d21565b508392505b8483101561231a57826014026020019050606060020a81880151049150816001848a018154811015156122d857fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600192909201916122a9565b84841015612359576001546040805142815290517ff32c68e7736e0f3f51cf7e6d33003550534f6ce10665ed8430cd92d66b0bbb999181900360200190a25b50505090039392505050565b5460001090565b600182015482546000918291829182918791604060020a90046001604060020a031690811061239757fe5b60009182526020822001805460018901546001604060020a03604060020a92839004811697506000198a89010196509294506123de938a9392909104909116908686612f42565b9350509250925092565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528481166024830152604482018490529151918616916323b872dd916064808201926020929091908290030181600087803b15801561245c57600080fd5b505af1158015612470573d6000803e3d6000fd5b505050506040513d602081101561248657600080fd5b5051151561249357600080fd5b50505050565b600080838311156124a957600080fd5b5050900390565b80541561252d576040805160e560020a62461bcd02815260206004820152602b60248201527f4f726465726564496e74657276616c4c6973742077617320616c72656164792060448201527f696e697469616c697a6564000000000000000000000000000000000000000000606482015290519081900360840190fd5b604080516080810182526000808252602080830182815293830182815260608401838152865460018101885596845291909220925192909401805493519151945167ffffffffffffffff199094166001604060020a03938416176fffffffffffffffff00000000000000001916604060020a928416929092029190911777ffffffffffffffff000000000000000000000000000000001916608060020a948316949094029390931777ffffffffffffffffffffffffffffffffffffffffffffffff1660c060020a9190921602179055565b60008080808080806001604060020a03808916908a1610612669576040805160e560020a62461bcd02815260206004820181905260248201527f726967687420626f756e64206c657373207468616e206c65667420626f756e64604482015290519081900360640190fd5b8a546001604060020a038b16106126ca576040805160e560020a62461bcd02815260206004820152601260248201527f76616c696420696e64657820626f756e64730000000000000000000000000000604482015290519081900360640190fd5b8a548b906001604060020a038c169081106126e157fe5b600091825260209091200180548c549197508c9160c060020a9091046001604060020a031690811061270f57fe5b6000918252602090912087548d549190920196508c91608060020a90046001604060020a031690811061273e57fe5b60009182526020909120875491019450604060020a90046001604060020a031615156127b4576040805160e560020a62461bcd02815260206004820152601f60248201527f72656d6f76656420696e74657276616c20646f65736e27742065786973747300604482015290519081900360640190fd5b85546001604060020a03808b169116118015906127e6575085546001604060020a03604060020a909104811690891611155b151561283c576040805160e560020a62461bcd02815260206004820152601e60248201527f696e636f72726563742072656d6f7665642072616e676520626f756e64730000604482015290519081900360640190fd5b85546001604060020a038a8116818316149450898116604060020a909204161491508280156128685750815b156129a7578554600060c060020a9091046001604060020a031611156128c4578554855477ffffffffffffffff000000000000000000000000000000001916608060020a918290046001604060020a03169091021785556128f1565b855460018c018054608060020a9092046001604060020a031667ffffffffffffffff199092169190911790555b85546000608060020a9091046001604060020a03161115612947578554845477ffffffffffffffffffffffffffffffffffffffffffffffff1660c060020a918290046001604060020a0316909102178455612980565b855460018c0180546fffffffffffffffff0000000000000000191660c060020a9092046001604060020a0316604060020a029190911790555b8a548b906001604060020a038c1690811061299757fe5b6000918252602082200155612a87565b82156129cc57855467ffffffffffffffff19166001604060020a038916178655612a87565b81156129ff5785546fffffffffffffffff00000000000000001916604060020a6001604060020a038b1602178655612a87565b5084546001604060020a03898116604060020a9081026fffffffffffffffff0000000000000000198416178089559204811691612a4c918d918d91608060020a909104168b856001612f4f565b865477ffffffffffffffff000000000000000000000000000000001916608060020a6001604060020a03928316810291909117808955041696505b505050505050949350505050565b600080831515612aa857600091506112f1565b50828202828482811515612ab857fe5b0414612ac357600080fd5b9392505050565b600160a060020a0381161515612adf57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b612b4f613d4a565b6000825160001415612b765760408051808201909152600080825260208201529150612b92565b5050604080518082019091528151815260208281019082018190525b50919050565b6060600080600080612ba98661397e565b1515612bb457600080fd5b612bbd866139ab565b935083604051908082528060200260200182016040528015612bf957816020015b612be6613d4a565b815260200190600190039081612bde5790505b509450612c0986602001516139fb565b8660200151019250600090505b83811015612c6257612c2783613a5e565b91506040805190810160405280838152602001848152508582815181101515612c4c57fe5b6020908102909101015291810191600101612c16565b50505050919050565b612c73613cb6565b60e060405190810160405280612ca0846000815181101515612c9157fe5b90602001906020020151613aef565b600160a060020a03168152602001612ccf846001815181101515612cc057fe5b90602001906020020151613b77565b63ffffffff168152602001612cec846002815181101515612cc057fe5b63ffffffff168152602001612d09846003815181101515612cc057fe5b60ff168152602001612d23846004815181101515612c9157fe5b600160a060020a03168152602001612d43846005815181101515612cc057fe5b6001604060020a03168152602001612d63846006815181101515612cc057fe5b6001604060020a0316905292915050565b612d7c613cf2565b608060405190810160405280612d9a846000815181101515612cc057fe5b63ffffffff168152602001612dce612dc9856001815181101515612dba57fe5b90602001906020020151612b98565b613bad565b8152602001612de5846002815181101515612c9157fe5b600160a060020a03168152602001612e14846002815181101515612e0557fe5b90602001906020020151613bfd565b905292915050565b60008063ffffffff80851690841611156124a957600080fd5b60180201602081015160249091015160e060020a90910491606060020a90910490565b6040805160e060020a63ffffffff80881682026020808501919091529087169091026024830152606060020a600160a060020a0380871682026028850152851602603c830152825160308184030181526050909201928390528151600093918291908401908083835b60208310612ee05780518252601f199092019160209182019101612ec1565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b600082820163ffffffff8085169082161015612ac357600080fd5b600082820183811015612ac357600080fd5b6000610b10868686868660005b6000808080806001604060020a0380881690891610612fde576040805160e560020a62461bcd02815260206004820152602760248201527f726967687420626f756e64206c657373206f7220657175616c20746f206c656660448201527f7420626f756e6400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60018b015460006001604060020a0391821611908b1615158061300957506001604060020a038a1615155b151514613086576040805160e560020a62461bcd02815260206004820152602c60248201527f7072657620616e64206e65787420636f756c64206265207a65726f206966662060448201527f6e6f20696e74657276616c730000000000000000000000000000000000000000606482015290519081900360840190fd5b61308f8b612365565b151561309e5761309e8b6124b0565b8a548b906001604060020a038c169081106130b557fe5b9060005260206000200193508a600001896001604060020a03168154811015156130db57fe5b906000526020600020019250896001604060020a031660001480613114575083546001604060020a03604060020a909104811690891610155b1515613190576040805160e560020a62461bcd02815260206004820152602760248201527f626567696e20636f756c64206e6f7420696e746572736563742070726576206960448201527f6e74657276616c00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6001604060020a03891615806131b4575082546001604060020a0390811690881611155b1515613230576040805160e560020a62461bcd02815260206004820152602560248201527f656e6420636f756c64206e6f7420696e74657273656374206e65787420696e7460448201527f657276616c000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000896001604060020a031611151560008b6001604060020a0316111515141561330b5783546001604060020a038a8116608060020a9092041614801561328a575082546001604060020a038b811660c060020a90920416145b1515613306576040805160e560020a62461bcd02815260206004820152603760248201527f7072657620616e64206e6578742073686f756c6420726566657220746f20746860448201527f65206e65696768626f72696e6720696e74657276616c73000000000000000000606482015290519081900360840190fd5b61356d565b6000896001604060020a031611156133c75760018b01546001604060020a038a8116911614801561334b5750825460c060020a90046001604060020a0316155b1515613306576040805160e560020a62461bcd02815260206004820152602760248201527f6e6578742073686f756c6420726566657220746f20746865206669727374206960448201527f6e74657276616c00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008a6001604060020a0316111561356d5760018b01546001604060020a038b8116604060020a9092041614801561340e57508354608060020a90046001604060020a0316155b151561348a576040805160e560020a62461bcd02815260206004820152602660248201527f707265762073686f756c6420726566657220746f20746865206c61737420696e60448201527f74657276616c0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b85806134ad575060018b01546001604060020a038b8116604060020a9092041614155b806134cb575083546001604060020a03898116604060020a90920416145b151561356d576040805160e560020a62461bcd02815260206004820152604360248201527f73686f756c6420626567696e2066726f6d2074686520656e64206f66206c617460448201527f65737420696e74657276616c207768656e20616464696e6720746f207468652060648201527f656e640000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60008a6001604060020a0316118015613599575083546001604060020a03898116604060020a90920416145b91506000896001604060020a03161180156135c0575082546001604060020a038881169116145b9050811580156135ce575080155b156137e3578a6000018054905094508a6000016080604051908101604052808a6001604060020a03168152602001896001604060020a031681526020018b6001604060020a031681526020018c6001604060020a031681525090806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a8154816001604060020a0302191690836001604060020a0316021790555060208201518160000160086101000a8154816001604060020a0302191690836001604060020a0316021790555060408201518160000160106101000a8154816001604060020a0302191690836001604060020a0316021790555060608201518160000160186101000a8154816001604060020a0302191690836001604060020a031602179055505050506000896001604060020a0316111561374b57825477ffffffffffffffffffffffffffffffffffffffffffffffff1660c060020a6001604060020a03871602178355613778565b60018b0180546fffffffffffffffff00000000000000001916604060020a6001604060020a038816021790555b60008a6001604060020a031611156137bf57835477ffffffffffffffff000000000000000000000000000000001916608060020a6001604060020a038716021784556137de565b60018b01805467ffffffffffffffff19166001604060020a0387161790555b613970565b8180156137ed5750805b1561391657825484546001604060020a03604060020a92839004811683026fffffffffffffffff000000000000000019909216919091178087558554608060020a9081900483160277ffffffffffffffff000000000000000000000000000000001990911617865560018d01548c97508b821692900416141561389b5760018b0180546fffffffffffffffff00000000000000001916604060020a6001604060020a038816021790556138ef565b82548b5486918d91608060020a9091046001604060020a03169081106138bd57fe5b9060005260206000200160000160186101000a8154816001604060020a0302191690836001604060020a031602179055505b8a548b906001604060020a038b1690811061390657fe5b6000918252602082200155613970565b811561394c5783546fffffffffffffffff00000000000000001916604060020a6001604060020a03891602178455899450613970565b801561397057825467ffffffffffffffff19166001604060020a0389161783558894505b505050509695505050505050565b6020810151805160009190821a9060c060ff831610156139a157600092506112cb565b5060019392505050565b600080600080600092506139c285602001516139fb565b6020860151865191810193500190505b808210156139f2576139e382613a5e565b600190930192909101906139d2565b50909392505050565b8051600090811a6080811015613a145760009150612b92565b60b8811080613a2f575060c08110801590613a2f575060f881105b15613a3d5760019150612b92565b60c0811015613a525760b51981019150612b92565b60f51981019150612b92565b8051600090811a6080811015613a775760019150612b92565b60b8811015613a8c57607e1981019150612b92565b60c0811015613ab95760b78103600184019350806020036101000a84510460018201810193505050612b92565b60f8811015613ace5760be1981019150612b92565b60019290920151602083900360f7016101000a900490910160f51901919050565b805160009060151015613b72576040805160e560020a62461bcd02815260206004820152603a60248201527f496e76616c696420524c504974656d2e2041646472657373657320617265206560448201527f6e636f64656420696e203230206279746573206f72206c657373000000000000606482015290519081900360840190fd5b611f01825b6000806000806000613b8c86602001516139fb565b86516020978801518201519190039096036101000a90950495945050505050565b613bb5613d4a565b6040805190810160405280613bd2846000815181101515612cc057fe5b63ffffffff168152602001613bef846001815181101515612cc057fe5b63ffffffff16905292915050565b606060008060606000613c1386602001516139fb565b9350838660000151039250826040519080825280601f01601f191660200182016040528015613c4c578160200160208202803883390190505b509150816020019050613c66848760200151018285613c6f565b50949350505050565b60005b60208210613c94578351835260209384019390920191601f1990910190613c72565b50915181516020939093036101000a6000190180199091169216919091179052565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a081019091526000815260208101613d0d613d4a565b815260006020820152606060409091015290565b815481835581811115613d4557600083815260209020613d45918101908301613d61565b505050565b604080518082019091526000808252602082015290565b610b8891905b80821115613d7b5760008155600101613d67565b50905600a165627a7a72305820564708335c74cf1fadcc0ba25937bc9545f214f887e603806e137d337e1987d60029`

// DeployStore deploys a new Ethereum contract, binding an instance of Store to it.
func DeployStore(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Store, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StoreBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// Store is an auto generated Go binding around an Ethereum contract.
type Store struct {
	StoreCaller     // Read-only binding to the contract
	StoreTransactor // Write-only binding to the contract
	StoreFilterer   // Log filterer for contract events
}

// StoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoreSession struct {
	Contract     *Store            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoreCallerSession struct {
	Contract *StoreCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoreTransactorSession struct {
	Contract     *StoreTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoreRaw struct {
	Contract *Store // Generic contract binding to access the raw methods on
}

// StoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoreCallerRaw struct {
	Contract *StoreCaller // Generic read-only contract binding to access the raw methods on
}

// StoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoreTransactorRaw struct {
	Contract *StoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStore creates a new instance of Store, bound to a specific deployed contract.
func NewStore(address common.Address, backend bind.ContractBackend) (*Store, error) {
	contract, err := bindStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// NewStoreCaller creates a new read-only instance of Store, bound to a specific deployed contract.
func NewStoreCaller(address common.Address, caller bind.ContractCaller) (*StoreCaller, error) {
	contract, err := bindStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoreCaller{contract: contract}, nil
}

// NewStoreTransactor creates a new write-only instance of Store, bound to a specific deployed contract.
func NewStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*StoreTransactor, error) {
	contract, err := bindStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoreTransactor{contract: contract}, nil
}

// NewStoreFilterer creates a new log filterer instance of Store, bound to a specific deployed contract.
func NewStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*StoreFilterer, error) {
	contract, err := bindStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoreFilterer{contract: contract}, nil
}

// bindStore binds a generic wrapper to an already deployed contract.
func bindStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Store.Contract.StoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Store.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.contract.Transact(opts, method, params...)
}

// ASSETDECIMALSTRUNCATION is a free data retrieval call binding the contract method 0x1b044c3c.
//
// Solidity: function ASSET_DECIMALS_TRUNCATION() constant returns(uint256)
func (_Store *StoreCaller) ASSETDECIMALSTRUNCATION(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "ASSET_DECIMALS_TRUNCATION")
	return *ret0, err
}

// ASSETDECIMALSTRUNCATION is a free data retrieval call binding the contract method 0x1b044c3c.
//
// Solidity: function ASSET_DECIMALS_TRUNCATION() constant returns(uint256)
func (_Store *StoreSession) ASSETDECIMALSTRUNCATION() (*big.Int, error) {
	return _Store.Contract.ASSETDECIMALSTRUNCATION(&_Store.CallOpts)
}

// ASSETDECIMALSTRUNCATION is a free data retrieval call binding the contract method 0x1b044c3c.
//
// Solidity: function ASSET_DECIMALS_TRUNCATION() constant returns(uint256)
func (_Store *StoreCallerSession) ASSETDECIMALSTRUNCATION() (*big.Int, error) {
	return _Store.Contract.ASSETDECIMALSTRUNCATION(&_Store.CallOpts)
}

// ERC721ASSETID is a free data retrieval call binding the contract method 0xbfa6c37c.
//
// Solidity: function ERC721_ASSET_ID() constant returns(address)
func (_Store *StoreCaller) ERC721ASSETID(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "ERC721_ASSET_ID")
	return *ret0, err
}

// ERC721ASSETID is a free data retrieval call binding the contract method 0xbfa6c37c.
//
// Solidity: function ERC721_ASSET_ID() constant returns(address)
func (_Store *StoreSession) ERC721ASSETID() (common.Address, error) {
	return _Store.Contract.ERC721ASSETID(&_Store.CallOpts)
}

// ERC721ASSETID is a free data retrieval call binding the contract method 0xbfa6c37c.
//
// Solidity: function ERC721_ASSET_ID() constant returns(address)
func (_Store *StoreCallerSession) ERC721ASSETID() (common.Address, error) {
	return _Store.Contract.ERC721ASSETID(&_Store.CallOpts)
}

// MAINCOINASSETID is a free data retrieval call binding the contract method 0x9c6a3907.
//
// Solidity: function MAIN_COIN_ASSET_ID() constant returns(address)
func (_Store *StoreCaller) MAINCOINASSETID(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "MAIN_COIN_ASSET_ID")
	return *ret0, err
}

// MAINCOINASSETID is a free data retrieval call binding the contract method 0x9c6a3907.
//
// Solidity: function MAIN_COIN_ASSET_ID() constant returns(address)
func (_Store *StoreSession) MAINCOINASSETID() (common.Address, error) {
	return _Store.Contract.MAINCOINASSETID(&_Store.CallOpts)
}

// MAINCOINASSETID is a free data retrieval call binding the contract method 0x9c6a3907.
//
// Solidity: function MAIN_COIN_ASSET_ID() constant returns(address)
func (_Store *StoreCallerSession) MAINCOINASSETID() (common.Address, error) {
	return _Store.Contract.MAINCOINASSETID(&_Store.CallOpts)
}

// PLASMAASSETSTOTALSIZE is a free data retrieval call binding the contract method 0xf93a936f.
//
// Solidity: function PLASMA_ASSETS_TOTAL_SIZE() constant returns(uint32)
func (_Store *StoreCaller) PLASMAASSETSTOTALSIZE(opts *bind.CallOpts) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "PLASMA_ASSETS_TOTAL_SIZE")
	return *ret0, err
}

// PLASMAASSETSTOTALSIZE is a free data retrieval call binding the contract method 0xf93a936f.
//
// Solidity: function PLASMA_ASSETS_TOTAL_SIZE() constant returns(uint32)
func (_Store *StoreSession) PLASMAASSETSTOTALSIZE() (uint32, error) {
	return _Store.Contract.PLASMAASSETSTOTALSIZE(&_Store.CallOpts)
}

// PLASMAASSETSTOTALSIZE is a free data retrieval call binding the contract method 0xf93a936f.
//
// Solidity: function PLASMA_ASSETS_TOTAL_SIZE() constant returns(uint32)
func (_Store *StoreCallerSession) PLASMAASSETSTOTALSIZE() (uint32, error) {
	return _Store.Contract.PLASMAASSETSTOTALSIZE(&_Store.CallOpts)
}

// AssetOffsets is a free data retrieval call binding the contract method 0xcf616025.
//
// Solidity: function assetOffsets(asset address) constant returns(uint256)
func (_Store *StoreCaller) AssetOffsets(opts *bind.CallOpts, asset common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "assetOffsets", asset)
	return *ret0, err
}

// AssetOffsets is a free data retrieval call binding the contract method 0xcf616025.
//
// Solidity: function assetOffsets(asset address) constant returns(uint256)
func (_Store *StoreSession) AssetOffsets(asset common.Address) (*big.Int, error) {
	return _Store.Contract.AssetOffsets(&_Store.CallOpts, asset)
}

// AssetOffsets is a free data retrieval call binding the contract method 0xcf616025.
//
// Solidity: function assetOffsets(asset address) constant returns(uint256)
func (_Store *StoreCallerSession) AssetOffsets(asset common.Address) (*big.Int, error) {
	return _Store.Contract.AssetOffsets(&_Store.CallOpts, asset)
}

// Blocks is a free data retrieval call binding the contract method 0xf25b3f99.
//
// Solidity: function blocks(i uint256) constant returns(address)
func (_Store *StoreCaller) Blocks(opts *bind.CallOpts, i *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "blocks", i)
	return *ret0, err
}

// Blocks is a free data retrieval call binding the contract method 0xf25b3f99.
//
// Solidity: function blocks(i uint256) constant returns(address)
func (_Store *StoreSession) Blocks(i *big.Int) (common.Address, error) {
	return _Store.Contract.Blocks(&_Store.CallOpts, i)
}

// Blocks is a free data retrieval call binding the contract method 0xf25b3f99.
//
// Solidity: function blocks(i uint256) constant returns(address)
func (_Store *StoreCallerSession) Blocks(i *big.Int) (common.Address, error) {
	return _Store.Contract.Blocks(&_Store.CallOpts, i)
}

// BlocksLength is a free data retrieval call binding the contract method 0x8ce0b5a2.
//
// Solidity: function blocksLength() constant returns(uint256)
func (_Store *StoreCaller) BlocksLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "blocksLength")
	return *ret0, err
}

// BlocksLength is a free data retrieval call binding the contract method 0x8ce0b5a2.
//
// Solidity: function blocksLength() constant returns(uint256)
func (_Store *StoreSession) BlocksLength() (*big.Int, error) {
	return _Store.Contract.BlocksLength(&_Store.CallOpts)
}

// BlocksLength is a free data retrieval call binding the contract method 0x8ce0b5a2.
//
// Solidity: function blocksLength() constant returns(uint256)
func (_Store *StoreCallerSession) BlocksLength() (*big.Int, error) {
	return _Store.Contract.BlocksLength(&_Store.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_Store *StoreCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_Store *StoreSession) IsOwner() (bool, error) {
	return _Store.Contract.IsOwner(&_Store.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_Store *StoreCallerSession) IsOwner() (bool, error) {
	return _Store.Contract.IsOwner(&_Store.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Store *StoreCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Store *StoreSession) Owner() (common.Address, error) {
	return _Store.Contract.Owner(&_Store.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Store *StoreCallerSession) Owner() (common.Address, error) {
	return _Store.Contract.Owner(&_Store.CallOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() returns()
func (_Store *StoreTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() returns()
func (_Store *StoreSession) Deposit() (*types.Transaction, error) {
	return _Store.Contract.Deposit(&_Store.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() returns()
func (_Store *StoreTransactorSession) Deposit() (*types.Transaction, error) {
	return _Store.Contract.Deposit(&_Store.TransactOpts)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x97feb926.
//
// Solidity: function depositERC20(token address, amountArg uint256) returns()
func (_Store *StoreTransactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amountArg *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "depositERC20", token, amountArg)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x97feb926.
//
// Solidity: function depositERC20(token address, amountArg uint256) returns()
func (_Store *StoreSession) DepositERC20(token common.Address, amountArg *big.Int) (*types.Transaction, error) {
	return _Store.Contract.DepositERC20(&_Store.TransactOpts, token, amountArg)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x97feb926.
//
// Solidity: function depositERC20(token address, amountArg uint256) returns()
func (_Store *StoreTransactorSession) DepositERC20(token common.Address, amountArg *big.Int) (*types.Transaction, error) {
	return _Store.Contract.DepositERC20(&_Store.TransactOpts, token, amountArg)
}

// DepositERC721 is a paid mutator transaction binding the contract method 0xd29a4bf6.
//
// Solidity: function depositERC721(token address, tokenId uint256) returns()
func (_Store *StoreTransactor) DepositERC721(opts *bind.TransactOpts, token common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "depositERC721", token, tokenId)
}

// DepositERC721 is a paid mutator transaction binding the contract method 0xd29a4bf6.
//
// Solidity: function depositERC721(token address, tokenId uint256) returns()
func (_Store *StoreSession) DepositERC721(token common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Store.Contract.DepositERC721(&_Store.TransactOpts, token, tokenId)
}

// DepositERC721 is a paid mutator transaction binding the contract method 0xd29a4bf6.
//
// Solidity: function depositERC721(token address, tokenId uint256) returns()
func (_Store *StoreTransactorSession) DepositERC721(token common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Store.Contract.DepositERC721(&_Store.TransactOpts, token, tokenId)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(operator address,  address, tokenId uint256,  bytes) returns(bytes4)
func (_Store *StoreTransactor) OnERC721Received(opts *bind.TransactOpts, operator common.Address, arg1 common.Address, tokenId *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "onERC721Received", operator, arg1, tokenId, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(operator address,  address, tokenId uint256,  bytes) returns(bytes4)
func (_Store *StoreSession) OnERC721Received(operator common.Address, arg1 common.Address, tokenId *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _Store.Contract.OnERC721Received(&_Store.TransactOpts, operator, arg1, tokenId, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(operator address,  address, tokenId uint256,  bytes) returns(bytes4)
func (_Store *StoreTransactorSession) OnERC721Received(operator common.Address, arg1 common.Address, tokenId *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _Store.Contract.OnERC721Received(&_Store.TransactOpts, operator, arg1, tokenId, arg3)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Store *StoreTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Store *StoreSession) RenounceOwnership() (*types.Transaction, error) {
	return _Store.Contract.RenounceOwnership(&_Store.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Store *StoreTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Store.Contract.RenounceOwnership(&_Store.TransactOpts)
}

// SetAssetOffset is a paid mutator transaction binding the contract method 0x9b65e579.
//
// Solidity: function setAssetOffset(asset address, assetOffset uint256) returns()
func (_Store *StoreTransactor) SetAssetOffset(opts *bind.TransactOpts, asset common.Address, assetOffset *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "setAssetOffset", asset, assetOffset)
}

// SetAssetOffset is a paid mutator transaction binding the contract method 0x9b65e579.
//
// Solidity: function setAssetOffset(asset address, assetOffset uint256) returns()
func (_Store *StoreSession) SetAssetOffset(asset common.Address, assetOffset *big.Int) (*types.Transaction, error) {
	return _Store.Contract.SetAssetOffset(&_Store.TransactOpts, asset, assetOffset)
}

// SetAssetOffset is a paid mutator transaction binding the contract method 0x9b65e579.
//
// Solidity: function setAssetOffset(asset address, assetOffset uint256) returns()
func (_Store *StoreTransactorSession) SetAssetOffset(asset common.Address, assetOffset *big.Int) (*types.Transaction, error) {
	return _Store.Contract.SetAssetOffset(&_Store.TransactOpts, asset, assetOffset)
}

// SubmitBlocks is a paid mutator transaction binding the contract method 0xbada1164.
//
// Solidity: function submitBlocks(fromIndex uint256, newBlocks bytes) returns(uint256)
func (_Store *StoreTransactor) SubmitBlocks(opts *bind.TransactOpts, fromIndex *big.Int, newBlocks []byte) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "submitBlocks", fromIndex, newBlocks)
}

// SubmitBlocks is a paid mutator transaction binding the contract method 0xbada1164.
//
// Solidity: function submitBlocks(fromIndex uint256, newBlocks bytes) returns(uint256)
func (_Store *StoreSession) SubmitBlocks(fromIndex *big.Int, newBlocks []byte) (*types.Transaction, error) {
	return _Store.Contract.SubmitBlocks(&_Store.TransactOpts, fromIndex, newBlocks)
}

// SubmitBlocks is a paid mutator transaction binding the contract method 0xbada1164.
//
// Solidity: function submitBlocks(fromIndex uint256, newBlocks bytes) returns(uint256)
func (_Store *StoreTransactorSession) SubmitBlocks(fromIndex *big.Int, newBlocks []byte) (*types.Transaction, error) {
	return _Store.Contract.SubmitBlocks(&_Store.TransactOpts, fromIndex, newBlocks)
}

// SubmitBlocksSigned is a paid mutator transaction binding the contract method 0x1f10e5da.
//
// Solidity: function submitBlocksSigned(fromIndex uint256, newBlocks bytes, rsv bytes) returns(uint256)
func (_Store *StoreTransactor) SubmitBlocksSigned(opts *bind.TransactOpts, fromIndex *big.Int, newBlocks []byte, rsv []byte) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "submitBlocksSigned", fromIndex, newBlocks, rsv)
}

// SubmitBlocksSigned is a paid mutator transaction binding the contract method 0x1f10e5da.
//
// Solidity: function submitBlocksSigned(fromIndex uint256, newBlocks bytes, rsv bytes) returns(uint256)
func (_Store *StoreSession) SubmitBlocksSigned(fromIndex *big.Int, newBlocks []byte, rsv []byte) (*types.Transaction, error) {
	return _Store.Contract.SubmitBlocksSigned(&_Store.TransactOpts, fromIndex, newBlocks, rsv)
}

// SubmitBlocksSigned is a paid mutator transaction binding the contract method 0x1f10e5da.
//
// Solidity: function submitBlocksSigned(fromIndex uint256, newBlocks bytes, rsv bytes) returns(uint256)
func (_Store *StoreTransactorSession) SubmitBlocksSigned(fromIndex *big.Int, newBlocks []byte, rsv []byte) (*types.Transaction, error) {
	return _Store.Contract.SubmitBlocksSigned(&_Store.TransactOpts, fromIndex, newBlocks, rsv)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(newOwner address) returns()
func (_Store *StoreTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(newOwner address) returns()
func (_Store *StoreSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Store.Contract.TransferOwnership(&_Store.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(newOwner address) returns()
func (_Store *StoreTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Store.Contract.TransferOwnership(&_Store.TransactOpts, newOwner)
}

// WithdrawalBegin is a paid mutator transaction binding the contract method 0xb964a183.
//
// Solidity: function withdrawalBegin(inputBytes bytes) returns(bool)
func (_Store *StoreTransactor) WithdrawalBegin(opts *bind.TransactOpts, inputBytes []byte) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "withdrawalBegin", inputBytes)
}

// WithdrawalBegin is a paid mutator transaction binding the contract method 0xb964a183.
//
// Solidity: function withdrawalBegin(inputBytes bytes) returns(bool)
func (_Store *StoreSession) WithdrawalBegin(inputBytes []byte) (*types.Transaction, error) {
	return _Store.Contract.WithdrawalBegin(&_Store.TransactOpts, inputBytes)
}

// WithdrawalBegin is a paid mutator transaction binding the contract method 0xb964a183.
//
// Solidity: function withdrawalBegin(inputBytes bytes) returns(bool)
func (_Store *StoreTransactorSession) WithdrawalBegin(inputBytes []byte) (*types.Transaction, error) {
	return _Store.Contract.WithdrawalBegin(&_Store.TransactOpts, inputBytes)
}

// WithdrawalChallangeSpend is a paid mutator transaction binding the contract method 0x1718904a.
//
// Solidity: function withdrawalChallangeSpend(inputBytes bytes, txProofBytes bytes, blockIndex uint64, spendIndex uint8) returns(bool)
func (_Store *StoreTransactor) WithdrawalChallangeSpend(opts *bind.TransactOpts, inputBytes []byte, txProofBytes []byte, blockIndex uint64, spendIndex uint8) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "withdrawalChallangeSpend", inputBytes, txProofBytes, blockIndex, spendIndex)
}

// WithdrawalChallangeSpend is a paid mutator transaction binding the contract method 0x1718904a.
//
// Solidity: function withdrawalChallangeSpend(inputBytes bytes, txProofBytes bytes, blockIndex uint64, spendIndex uint8) returns(bool)
func (_Store *StoreSession) WithdrawalChallangeSpend(inputBytes []byte, txProofBytes []byte, blockIndex uint64, spendIndex uint8) (*types.Transaction, error) {
	return _Store.Contract.WithdrawalChallangeSpend(&_Store.TransactOpts, inputBytes, txProofBytes, blockIndex, spendIndex)
}

// WithdrawalChallangeSpend is a paid mutator transaction binding the contract method 0x1718904a.
//
// Solidity: function withdrawalChallangeSpend(inputBytes bytes, txProofBytes bytes, blockIndex uint64, spendIndex uint8) returns(bool)
func (_Store *StoreTransactorSession) WithdrawalChallangeSpend(inputBytes []byte, txProofBytes []byte, blockIndex uint64, spendIndex uint8) (*types.Transaction, error) {
	return _Store.Contract.WithdrawalChallangeSpend(&_Store.TransactOpts, inputBytes, txProofBytes, blockIndex, spendIndex)
}

// WithdrawalEnd is a paid mutator transaction binding the contract method 0xe9755357.
//
// Solidity: function withdrawalEnd(inputBytes bytes, intervalId uint64, token address, tokenId uint256) returns()
func (_Store *StoreTransactor) WithdrawalEnd(opts *bind.TransactOpts, inputBytes []byte, intervalId uint64, token common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "withdrawalEnd", inputBytes, intervalId, token, tokenId)
}

// WithdrawalEnd is a paid mutator transaction binding the contract method 0xe9755357.
//
// Solidity: function withdrawalEnd(inputBytes bytes, intervalId uint64, token address, tokenId uint256) returns()
func (_Store *StoreSession) WithdrawalEnd(inputBytes []byte, intervalId uint64, token common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Store.Contract.WithdrawalEnd(&_Store.TransactOpts, inputBytes, intervalId, token, tokenId)
}

// WithdrawalEnd is a paid mutator transaction binding the contract method 0xe9755357.
//
// Solidity: function withdrawalEnd(inputBytes bytes, intervalId uint64, token address, tokenId uint256) returns()
func (_Store *StoreTransactorSession) WithdrawalEnd(inputBytes []byte, intervalId uint64, token common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Store.Contract.WithdrawalEnd(&_Store.TransactOpts, inputBytes, intervalId, token, tokenId)
}

// StoreAssetDepositedIterator is returned from FilterAssetDeposited and is used to iterate over the raw logs and unpacked data for AssetDeposited events raised by the Store contract.
type StoreAssetDepositedIterator struct {
	Event *StoreAssetDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreAssetDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreAssetDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreAssetDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreAssetDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreAssetDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreAssetDeposited represents a AssetDeposited event raised by the Store contract.
type StoreAssetDeposited struct {
	Token      common.Address
	Who        common.Address
	IntervalId uint64
	Begin      uint64
	End        uint64
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAssetDeposited is a free log retrieval operation binding the contract event 0x9032c225a61b3707cb5287484fb18ea898ee87a267f5ad3566cbef48ddc24fba.
//
// Solidity: e AssetDeposited(token indexed address, who indexed address, intervalId uint64, begin uint64, end uint64)
func (_Store *StoreFilterer) FilterAssetDeposited(opts *bind.FilterOpts, token []common.Address, who []common.Address) (*StoreAssetDepositedIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "AssetDeposited", tokenRule, whoRule)
	if err != nil {
		return nil, err
	}
	return &StoreAssetDepositedIterator{contract: _Store.contract, event: "AssetDeposited", logs: logs, sub: sub}, nil
}

// WatchAssetDeposited is a free log subscription operation binding the contract event 0x9032c225a61b3707cb5287484fb18ea898ee87a267f5ad3566cbef48ddc24fba.
//
// Solidity: e AssetDeposited(token indexed address, who indexed address, intervalId uint64, begin uint64, end uint64)
func (_Store *StoreFilterer) WatchAssetDeposited(opts *bind.WatchOpts, sink chan<- *StoreAssetDeposited, token []common.Address, who []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "AssetDeposited", tokenRule, whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreAssetDeposited)
				if err := _Store.contract.UnpackLog(event, "AssetDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StoreBlocksSubmittedIterator is returned from FilterBlocksSubmitted and is used to iterate over the raw logs and unpacked data for BlocksSubmitted events raised by the Store contract.
type StoreBlocksSubmittedIterator struct {
	Event *StoreBlocksSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreBlocksSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreBlocksSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreBlocksSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreBlocksSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreBlocksSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreBlocksSubmitted represents a BlocksSubmitted event raised by the Store contract.
type StoreBlocksSubmitted struct {
	Length *big.Int
	Time   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBlocksSubmitted is a free log retrieval operation binding the contract event 0xf32c68e7736e0f3f51cf7e6d33003550534f6ce10665ed8430cd92d66b0bbb99.
//
// Solidity: e BlocksSubmitted(length indexed uint256, time uint256)
func (_Store *StoreFilterer) FilterBlocksSubmitted(opts *bind.FilterOpts, length []*big.Int) (*StoreBlocksSubmittedIterator, error) {

	var lengthRule []interface{}
	for _, lengthItem := range length {
		lengthRule = append(lengthRule, lengthItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "BlocksSubmitted", lengthRule)
	if err != nil {
		return nil, err
	}
	return &StoreBlocksSubmittedIterator{contract: _Store.contract, event: "BlocksSubmitted", logs: logs, sub: sub}, nil
}

// WatchBlocksSubmitted is a free log subscription operation binding the contract event 0xf32c68e7736e0f3f51cf7e6d33003550534f6ce10665ed8430cd92d66b0bbb99.
//
// Solidity: e BlocksSubmitted(length indexed uint256, time uint256)
func (_Store *StoreFilterer) WatchBlocksSubmitted(opts *bind.WatchOpts, sink chan<- *StoreBlocksSubmitted, length []*big.Int) (event.Subscription, error) {

	var lengthRule []interface{}
	for _, lengthItem := range length {
		lengthRule = append(lengthRule, lengthItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "BlocksSubmitted", lengthRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreBlocksSubmitted)
				if err := _Store.contract.UnpackLog(event, "BlocksSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StoreCoinDepositedIterator is returned from FilterCoinDeposited and is used to iterate over the raw logs and unpacked data for CoinDeposited events raised by the Store contract.
type StoreCoinDepositedIterator struct {
	Event *StoreCoinDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreCoinDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreCoinDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreCoinDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreCoinDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreCoinDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreCoinDeposited represents a CoinDeposited event raised by the Store contract.
type StoreCoinDeposited struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCoinDeposited is a free log retrieval operation binding the contract event 0x7d6babeeae6799e032644c4c2d100c2ab47a967aec6115cf3ec5c09b818a62b6.
//
// Solidity: e CoinDeposited(who indexed address, amount uint256)
func (_Store *StoreFilterer) FilterCoinDeposited(opts *bind.FilterOpts, who []common.Address) (*StoreCoinDepositedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "CoinDeposited", whoRule)
	if err != nil {
		return nil, err
	}
	return &StoreCoinDepositedIterator{contract: _Store.contract, event: "CoinDeposited", logs: logs, sub: sub}, nil
}

// WatchCoinDeposited is a free log subscription operation binding the contract event 0x7d6babeeae6799e032644c4c2d100c2ab47a967aec6115cf3ec5c09b818a62b6.
//
// Solidity: e CoinDeposited(who indexed address, amount uint256)
func (_Store *StoreFilterer) WatchCoinDeposited(opts *bind.WatchOpts, sink chan<- *StoreCoinDeposited, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "CoinDeposited", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreCoinDeposited)
				if err := _Store.contract.UnpackLog(event, "CoinDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StoreERC20DepositedIterator is returned from FilterERC20Deposited and is used to iterate over the raw logs and unpacked data for ERC20Deposited events raised by the Store contract.
type StoreERC20DepositedIterator struct {
	Event *StoreERC20Deposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreERC20DepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreERC20Deposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreERC20Deposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreERC20DepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreERC20DepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreERC20Deposited represents a ERC20Deposited event raised by the Store contract.
type StoreERC20Deposited struct {
	Token  common.Address
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterERC20Deposited is a free log retrieval operation binding the contract event 0xe33e9822e3317b004d587136bab2627ea1ecfbba4eb79abddd0a56cfdd09c0e1.
//
// Solidity: e ERC20Deposited(token indexed address, who indexed address, amount uint256)
func (_Store *StoreFilterer) FilterERC20Deposited(opts *bind.FilterOpts, token []common.Address, who []common.Address) (*StoreERC20DepositedIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "ERC20Deposited", tokenRule, whoRule)
	if err != nil {
		return nil, err
	}
	return &StoreERC20DepositedIterator{contract: _Store.contract, event: "ERC20Deposited", logs: logs, sub: sub}, nil
}

// WatchERC20Deposited is a free log subscription operation binding the contract event 0xe33e9822e3317b004d587136bab2627ea1ecfbba4eb79abddd0a56cfdd09c0e1.
//
// Solidity: e ERC20Deposited(token indexed address, who indexed address, amount uint256)
func (_Store *StoreFilterer) WatchERC20Deposited(opts *bind.WatchOpts, sink chan<- *StoreERC20Deposited, token []common.Address, who []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "ERC20Deposited", tokenRule, whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreERC20Deposited)
				if err := _Store.contract.UnpackLog(event, "ERC20Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StoreERC721DepositedIterator is returned from FilterERC721Deposited and is used to iterate over the raw logs and unpacked data for ERC721Deposited events raised by the Store contract.
type StoreERC721DepositedIterator struct {
	Event *StoreERC721Deposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreERC721DepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreERC721Deposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreERC721Deposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreERC721DepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreERC721DepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreERC721Deposited represents a ERC721Deposited event raised by the Store contract.
type StoreERC721Deposited struct {
	Token   common.Address
	Who     common.Address
	TokenId *big.Int
	Begin   uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterERC721Deposited is a free log retrieval operation binding the contract event 0x9e49df316dc5092c01f8b43df9e0a400cf0ce3c7f7d943da44da5a6a3446aa50.
//
// Solidity: e ERC721Deposited(token indexed address, who indexed address, tokenId uint256, begin indexed uint64)
func (_Store *StoreFilterer) FilterERC721Deposited(opts *bind.FilterOpts, token []common.Address, who []common.Address, begin []uint64) (*StoreERC721DepositedIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	var beginRule []interface{}
	for _, beginItem := range begin {
		beginRule = append(beginRule, beginItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "ERC721Deposited", tokenRule, whoRule, beginRule)
	if err != nil {
		return nil, err
	}
	return &StoreERC721DepositedIterator{contract: _Store.contract, event: "ERC721Deposited", logs: logs, sub: sub}, nil
}

// WatchERC721Deposited is a free log subscription operation binding the contract event 0x9e49df316dc5092c01f8b43df9e0a400cf0ce3c7f7d943da44da5a6a3446aa50.
//
// Solidity: e ERC721Deposited(token indexed address, who indexed address, tokenId uint256, begin indexed uint64)
func (_Store *StoreFilterer) WatchERC721Deposited(opts *bind.WatchOpts, sink chan<- *StoreERC721Deposited, token []common.Address, who []common.Address, begin []uint64) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	var beginRule []interface{}
	for _, beginItem := range begin {
		beginRule = append(beginRule, beginItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "ERC721Deposited", tokenRule, whoRule, beginRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreERC721Deposited)
				if err := _Store.contract.UnpackLog(event, "ERC721Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StoreOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Store contract.
type StoreOwnershipTransferredIterator struct {
	Event *StoreOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreOwnershipTransferred represents a OwnershipTransferred event raised by the Store contract.
type StoreOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_Store *StoreFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StoreOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StoreOwnershipTransferredIterator{contract: _Store.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_Store *StoreFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StoreOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreOwnershipTransferred)
				if err := _Store.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StoreWithdrawalBeginIterator is returned from FilterWithdrawalBegin and is used to iterate over the raw logs and unpacked data for WithdrawalBegin events raised by the Store contract.
type StoreWithdrawalBeginIterator struct {
	Event *StoreWithdrawalBegin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreWithdrawalBeginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreWithdrawalBegin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreWithdrawalBegin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreWithdrawalBeginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreWithdrawalBeginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreWithdrawalBegin represents a WithdrawalBegin event raised by the Store contract.
type StoreWithdrawalBegin struct {
	Owner       common.Address
	BlockIndex  uint32
	TxIndex     uint32
	OutputIndex uint8
	AssetId     common.Address
	Begin       uint64
	End         uint64
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalBegin is a free log retrieval operation binding the contract event 0x7bdb2cf01b63deccbb5bd6324837d4263466ea905850e0adcc6c7ddb448181a3.
//
// Solidity: e WithdrawalBegin(owner address, blockIndex uint32, txIndex uint32, outputIndex uint8, assetId address, begin uint64, end uint64)
func (_Store *StoreFilterer) FilterWithdrawalBegin(opts *bind.FilterOpts) (*StoreWithdrawalBeginIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "WithdrawalBegin")
	if err != nil {
		return nil, err
	}
	return &StoreWithdrawalBeginIterator{contract: _Store.contract, event: "WithdrawalBegin", logs: logs, sub: sub}, nil
}

// WatchWithdrawalBegin is a free log subscription operation binding the contract event 0x7bdb2cf01b63deccbb5bd6324837d4263466ea905850e0adcc6c7ddb448181a3.
//
// Solidity: e WithdrawalBegin(owner address, blockIndex uint32, txIndex uint32, outputIndex uint8, assetId address, begin uint64, end uint64)
func (_Store *StoreFilterer) WatchWithdrawalBegin(opts *bind.WatchOpts, sink chan<- *StoreWithdrawalBegin) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "WithdrawalBegin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreWithdrawalBegin)
				if err := _Store.contract.UnpackLog(event, "WithdrawalBegin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
